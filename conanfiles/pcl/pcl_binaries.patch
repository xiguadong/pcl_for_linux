diff --git a/apps/CMakeLists.txt b/apps/CMakeLists.txt
index 67aec2718..0e826fe58 100644
--- a/apps/CMakeLists.txt
+++ b/apps/CMakeLists.txt
@@ -6,7 +6,7 @@ set(DEFAULT FALSE)
 PCL_SUBSYS_OPTION(build "${SUBSYS_NAME}" "${SUBSYS_DESC}" ${DEFAULT} "${REASON}")
 PCL_SUBSYS_DEPEND(build "${SUBSYS_NAME}" DEPS ${SUBSYS_DEPS} OPT_DEPS openni vtk)
 
-if(build)
+if(build AND PCL_BINARIES)
 
   include_directories("${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/include")
 
@@ -240,4 +240,3 @@ if(build)
   PCL_ADD_INCLUDES("${SUBSYS_NAME}" "${SUBSYS_NAME}/impl" ${impl_incs})
 
 endif(build)
-
diff --git a/apps/cloud_composer/CMakeLists.txt b/apps/cloud_composer/CMakeLists.txt
index d44497524..507c6f9ab 100644
--- a/apps/cloud_composer/CMakeLists.txt
+++ b/apps/cloud_composer/CMakeLists.txt
@@ -1,5 +1,5 @@
 #Disable some warnings which are all over Qt headers and make finding error messages hell
-#if(${CMAKE_CXX_FLAGS} MATCHES "-Wconversion") 
+#if(${CMAKE_CXX_FLAGS} MATCHES "-Wconversion")
 #  string(REGEX REPLACE "-Wconversion(.+)" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
 #endif()
 
@@ -7,7 +7,7 @@ SET(SUBSUBSYS_NAME cloud_composer)
 SET(SUBSUBSYS_DESC "Cloud Composer - Application for Manipulating Point Clouds")
 SET(SUBSUBSYS_DEPS common io visualization filters apps)
 
-# Find VTK 
+# Find VTK
 if(NOT VTK_FOUND)
   set(DEFAULT AUTO_OFF)
   set(REASON "VTK was not found.")
@@ -48,7 +48,7 @@ PCL_ADD_DOC(${SUBSUBSYS_NAME})
 if(build)
 
     include_directories("${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/include")
-  
+
     #Sources & Headers for main application
     set(incs "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/qt.h"
              "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/cloud_composer.h"
@@ -66,8 +66,8 @@ if(build)
              "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/signal_multiplexer.h"
              "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/merge_selection.h"
              "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/transform_clouds.h")
-          
-    set(srcs src/main.cpp 
+
+    set(srcs src/main.cpp
              src/cloud_composer.cpp
              src/project_model.cpp
              src/cloud_viewer.cpp
@@ -82,52 +82,54 @@ if(build)
              src/merge_selection.cpp
              src/tool_interface/abstract_tool.cpp
              src/transform_clouds.cpp)
-          
+
     set(impl_incs "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/impl/cloud_item.hpp"
                   "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/impl/merge_selection.hpp"
                   "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/impl/transform_clouds.hpp")
-              
-    #Sources and headers for item types      
+
+    #Sources and headers for item types
     set(item_incs "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/items/cloud_composer_item.h"
                   "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/items/cloud_item.h"
                   "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/items/normals_item.h"
                   "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/items/fpfh_item.h")
-           
+
     set(item_srcs src/items/cloud_composer_item.cpp
                   src/items/cloud_item.cpp
                   src/items/normals_item.cpp
                   src/items/fpfh_item.cpp)
-                  
+
     #Sources and headers for point selectors
     set (selector_incs "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/point_selectors/interactor_style_switch.h"
                        "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/point_selectors/rectangular_frustum_selector.h"
                        "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/point_selectors/selected_trackball_interactor_style.h"
                        "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/point_selectors/click_trackball_interactor_style.h")
-                       
+
     set (selector_srcs src/point_selectors/interactor_style_switch.cpp
                        src/point_selectors/selection_event.cpp
                        src/point_selectors/rectangular_frustum_selector.cpp
                        src/point_selectors/selected_trackball_interactor_style.cpp
                        src/point_selectors/click_trackball_interactor_style.cpp
                        src/point_selectors/manipulation_event.cpp)
-                       
+
     set(uis src/cloud_composer_main_window.ui)
     set(resources resources/resources.qrc)
 
     QT4_WRAP_UI(cloud_composer_ui ${uis})
     QT4_WRAP_CPP(cloud_composer_moc ${incs} OPTIONS -DBOOST_TT_HAS_OPERATOR_HPP_INCLUDED -DBOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)
     QT4_ADD_RESOURCES(resource_srcs ${resources})
-    
+
+    if(PCL_BINARIES)
     set(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
     PCL_ADD_EXECUTABLE("${EXE_NAME}" "${SUBSUBSYS_NAME}" ${cloud_composer_ui} ${cloud_composer_moc} ${srcs} ${resource_srcs} ${item_srcs} ${selector_srcs} ${impl_incs})
     target_link_libraries("${EXE_NAME}" pcl_common pcl_io pcl_visualization pcl_filters ${QVTK_LIBRARY} ${QT_LIBRARIES})
+    endif()
 
     # Install include files
     PCL_ADD_INCLUDES("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}" ${incs} ${item_incs} ${selector_incs})
     PCL_ADD_INCLUDES("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}/impl" ${impl_incs})
-    
+
     PCL_MAKE_PKGCONFIG("${EXE_NAME}" "${SUBSUBSYS_NAME}" "${SUBSYS_DESC}" "" "" "" "" "")
-    
+
 
     #TOOL buildING SCRIPTS
     #Create subdirectory for plugin libs
@@ -136,7 +138,7 @@ if(build)
 
     set(INTERFACE_HEADERS "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/tool_interface/abstract_tool.h")
     set(INTERFACE_SOURCES src/tool_interface/abstract_tool.cpp)
-    
+
     QT4_WRAP_CPP(INTERFACE_HEADERS_MOC ${INTERFACE_HEADERS} OPTIONS -DBOOST_TT_HAS_OPERATOR_HPP_INCLUDED -DBOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)
     PCL_ADD_LIBRARY(pcl_cc_tool_interface "${SUBSUBSYS_NAME}" ${INTERFACE_SOURCES} ${INTERFACE_HEADERS_MOC})
     target_link_libraries(pcl_cc_tool_interface pcl_common ${QT_LIBRARIES})
@@ -144,15 +146,15 @@ if(build)
     IF(APPLE)
        SET_TARGET_PROPERTIES(pcl_cc_tool_interface PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
     ENDIF()
-    
+
     include(ComposerTool.cmake REQUIRED)
-    
+
     #FPFH Tool
     set (FPFH_DEPS pcl_features pcl_kdtree pcl_filters)
     set (FPFH_SOURCES tools/fpfh_estimation.cpp)
     set (FPFH_HEADERS "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/tools/fpfh_estimation.h")
     define_composer_tool (fpfh_estimation "${FPFH_SOURCES}" "${FPFH_HEADERS}" "${FPFH_DEPS}")
-    
+
     #Normals Tool
     set (NORMALS_DEPS pcl_features pcl_kdtree)
     set (NORMALS_SOURCES tools/normal_estimation.cpp)
@@ -164,31 +166,31 @@ if(build)
     set (EC_SOURCES tools/euclidean_clustering.cpp)
     set (EC_HEADERS "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/tools/euclidean_clustering.h")
     define_composer_tool (euclidean_clustering "${EC_SOURCES}" "${EC_HEADERS}" "${EC_DEPS}")
-    
+
     #Statistical Outlier Removal Tool
     set (SOR_DEPS pcl_filters)
     set (SOR_SOURCES tools/statistical_outlier_removal.cpp)
     set (SOR_HEADERS "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/tools/statistical_outlier_removal.h")
     define_composer_tool (statistical_outlier_removal "${SOR_SOURCES}" "${SOR_HEADERS}" "${SOR_DEPS}")
-    
+
     #Vox Grid Downsample Tool
     set (VOXDS_DEPS pcl_filters)
     set (VOXDS_SOURCES tools/voxel_grid_downsample.cpp)
     set (VOXDS_HEADERS "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/tools/voxel_grid_downsample.h")
     define_composer_tool (voxel_grid_downsample "${VOXDS_SOURCES}" "${VOXDS_HEADERS}" "${VOXDS_DEPS}")
-    
+
      #Organized Segmentation
     set (OSEG_DEPS pcl_segmentation pcl_kdtree)
     set (OSEG_SOURCES tools/organized_segmentation.cpp "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/tools/impl/organized_segmentation.hpp")
     set (OSEG_HEADERS "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/tools/organized_segmentation.h")
     define_composer_tool (organized_segmentation "${OSEG_SOURCES}" "${OSEG_HEADERS}" "${OSEG_DEPS}")
-    
+
         #Sanitize Cloud Tool
     set (SAN_DEPS pcl_filters)
     set (SAN_SOURCES tools/sanitize_cloud.cpp)
     set (SAN_HEADERS "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/tools/sanitize_cloud.h")
     define_composer_tool (sanitize_cloud "${SAN_SOURCES}" "${SAN_HEADERS}" "${SAN_DEPS}")
-    
+
      #Supervoxels
     set (VSP_DEPS pcl_octree pcl_segmentation)
     set (VSP_SOURCES tools/supervoxels.cpp "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/tools/impl/supervoxels.hpp")
diff --git a/apps/in_hand_scanner/CMakeLists.txt b/apps/in_hand_scanner/CMakeLists.txt
index 5f9e86a36..3e31aa171 100644
--- a/apps/in_hand_scanner/CMakeLists.txt
+++ b/apps/in_hand_scanner/CMakeLists.txt
@@ -121,9 +121,11 @@ if(build)
   list(APPEND INCS "${MOC_IN_HAND_SCANNER_INC}" "${MOC_OPENGL_VIEWER_INC}" "${MOC_MAIN_WINDOW_INC}" "${MOC_HELP_WINDOW_INC}" "${UI_MAIN_WINDOW_INC}" "${UI_HELP_WINDOW_INC}")
   list(APPEND SRCS "${MOC_IN_HAND_SCANNER_SRC}" "${MOC_OPENGL_VIEWER_SRC}" "${MOC_MAIN_WINDOW_SRC}" "${MOC_HELP_WINDOW_SRC}")
 
+  if(PCL_BINARIES)
   set(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
   pcl_add_executable_opt_bundle("${EXE_NAME}" "${SUBSUBSYS_NAME}" ${SRCS} ${INCS} ${IMPL_INCS})
   target_link_libraries("${EXE_NAME}" ${SUBSUBSYS_LIBS} ${OPENGL_LIBRARIES} ${QT_LIBRARIES})
+  endif()
 
   pcl_add_includes("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}" ${INCS})
   pcl_add_includes("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}/impl" ${IMPL_INCS})
@@ -134,7 +136,8 @@ if(build)
   list(APPEND OI_INCS "${MOC_OPENGL_VIEWER_INC}" "${MOC_OFFLINE_INTEGRATION_INC}")
   list(APPEND OI_SRCS "${MOC_OPENGL_VIEWER_SRC}" "${MOC_OFFLINE_INTEGRATION_SRC}")
 
+  if(PCL_BINARIES)
   pcl_add_executable_opt_bundle(pcl_offline_integration "${SUBSUBSYS_NAME}" ${OI_SRCS} ${OI_INCS})
   target_link_libraries(pcl_offline_integration ${SUBSUBSYS_LIBS} ${OPENGL_LIBRARIES} ${QT_LIBRARIES})
-
+  endif()
 endif()
diff --git a/apps/modeler/CMakeLists.txt b/apps/modeler/CMakeLists.txt
index 6424d3f82..1c37779ed 100644
--- a/apps/modeler/CMakeLists.txt
+++ b/apps/modeler/CMakeLists.txt
@@ -45,7 +45,7 @@ PCL_ADD_DOC("${SUBSUBSYS_NAME}")
 if(build)
   include_directories("${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/include")
 
-  # Set Qt files and resources here 
+  # Set Qt files and resources here
   set(uis main_window.ui)
   set(moc_incs "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/main_window.h"
                "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/scene_tree.h"
@@ -122,6 +122,7 @@ if(build)
   SET_SOURCE_FILES_PROPERTIES(${srcs} PROPERTIES OBJECT_DEPENDS "${ui_srcs}")
 
   # Generate executable
+  if(PCL_BINARIES)
   set(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
   PCL_ADD_EXECUTABLE("${EXE_NAME}" "${SUBSUBSYS_NAME}" ${ui_srcs} ${moc_srcs} ${resource_srcs} ${srcs} ${incs} ${impl_incs})
   target_link_libraries("${EXE_NAME}" pcl_common pcl_io pcl_kdtree pcl_filters pcl_visualization pcl_segmentation pcl_surface pcl_features pcl_sample_consensus pcl_search ${QVTK_LIBRARY} ${QT_LIBRARIES})
@@ -138,6 +139,7 @@ if(build)
   PCL_ADD_INCLUDES("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}/impl" ${impl_incs})
 
   PCL_MAKE_PKGCONFIG("${EXE_NAME}" "${SUBSUBSYS_NAME}" "${SUBSUBSYS_DESC}" "" "" "" "" "")
+  endif()
 
   add_subdirectory(tools)
 
diff --git a/apps/optronic_viewer/CMakeLists.txt b/apps/optronic_viewer/CMakeLists.txt
index 5767aa7e1..cc1829c7a 100644
--- a/apps/optronic_viewer/CMakeLists.txt
+++ b/apps/optronic_viewer/CMakeLists.txt
@@ -48,7 +48,7 @@ if(build)
 
   include_directories("${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/include")
 
-  # Set Qt files and resources here 
+  # Set Qt files and resources here
 #  set(uis main_window.ui)
   set(moc_incs "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/main_window.h"
                "include/pcl/${SUBSYS_NAME}/${SUBSUBSYS_NAME}/filter_window.h"
@@ -86,12 +86,13 @@ if(build)
 #  SOURCE_GROUP("Generated" FILES ${ui_srcs} ${moc_srcs} ${resource_srcs} ${RCS_SOURCES})
 #  SET_SOURCE_FILES_PROPERTIES(${srcs} PROPERTIES OBJECT_DEPENDS "${ui_srcs}")
 
+  if(PCL_BINARIES)
   # Generate executable
   set(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
 #  PCL_ADD_EXECUTABLE("${EXE_NAME}" "${SUBSUBSYS_NAME}" ${ui_srcs} ${moc_srcs} ${resource_srcs} ${srcs} ${incs} ${impl_incs})
   PCL_ADD_EXECUTABLE("${EXE_NAME}" "${SUBSUBSYS_NAME}" ${moc_srcs} ${srcs} ${incs} ${impl_incs})
   target_link_libraries("${EXE_NAME}" pcl_common pcl_io pcl_kdtree pcl_filters pcl_visualization pcl_segmentation pcl_surface pcl_features pcl_sample_consensus pcl_search QVTK ${QT_LIBRARIES})
-
+  endif()
   # Put the ui in the windows project file
   IF("${CMAKE_BUILD_TOOL}" MATCHES "msdev")
     LIST(APPEND srcs ${uis})
@@ -102,7 +103,7 @@ if(build)
   # Install include files
   PCL_ADD_INCLUDES("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}" ${incs})
   PCL_ADD_INCLUDES("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}/impl" ${impl_incs})
-
+  if(PCL_BINARIES)
   PCL_MAKE_PKGCONFIG("${EXE_NAME}" "${SUBSUBSYS_NAME}" "${SUBSUBSYS_DESC}" "" "" "" "" "")
-
+  endif()
 endif(build)
diff --git a/apps/point_cloud_editor/CMakeLists.txt b/apps/point_cloud_editor/CMakeLists.txt
index 7c0275678..dc50aeef1 100644
--- a/apps/point_cloud_editor/CMakeLists.txt
+++ b/apps/point_cloud_editor/CMakeLists.txt
@@ -95,6 +95,7 @@ IF(BUILD)
                       "${QT_QTOPENGL_INCLUDE_DIR}"
 		      )
 
+  if(PCL_BINARIES)
   SET(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
   PCL_ADD_EXECUTABLE("${EXE_NAME}"
                      "${SUBSUBSYS_NAME}"
@@ -113,7 +114,9 @@ IF(BUILD)
                         pcl_io
                         pcl_filters
 			)
-
+  endif()
   PCL_ADD_INCLUDES("${SUBSUBSYS_NAME}" "${SUBSYS_NAME}/${SUBSUBSYS_NAME}" ${INCS})
+  if(PCL_BINARIES)
   PCL_MAKE_PKGCONFIG("${EXE_NAME}" "${SUBSUBSYS_NAME}" "${SUBSUBSYS_DESC}" "" "" "" "" "")
+  endif()
 ENDIF(BUILD)
diff --git a/cmake/pcl_targets.cmake b/cmake/pcl_targets.cmake
index 30696346f..d7ef29f39 100644
--- a/cmake/pcl_targets.cmake
+++ b/cmake/pcl_targets.cmake
@@ -201,7 +201,7 @@ macro(PCL_ADD_LIBRARY _name _component)
     if (MINGW)
       target_link_libraries(${_name} gomp)
     endif()
-	
+
 	if(MSVC)
 	  target_link_libraries(${_name} delayimp.lib)  # because delay load is enabled for openmp.dll
 	endif()
@@ -235,7 +235,7 @@ macro(PCL_CUDA_ADD_LIBRARY _name _component)
     else(PCL_SHARED_LIBS)
         cuda_add_library(${_name} ${PCL_LIB_TYPE} ${ARGN})
     endif(PCL_SHARED_LIBS)
-    
+
     # must link explicitly against boost.
     target_link_libraries(${_name} ${Boost_LIBRARIES})
 
@@ -260,6 +260,7 @@ endmacro(PCL_CUDA_ADD_LIBRARY)
 # _component The part of PCL that this library belongs to.
 # ARGN the source files for the library.
 macro(PCL_ADD_EXECUTABLE _name _component)
+if(PCL_BINARIES)
     add_executable(${_name} ${ARGN})
     # must link explicitly against boost.
     if(UNIX AND NOT ANDROID)
@@ -280,15 +281,17 @@ macro(PCL_ADD_EXECUTABLE _name _component)
     set(PCL_EXECUTABLES ${PCL_EXECUTABLES} ${_name})
     install(TARGETS ${_name} RUNTIME DESTINATION ${BIN_INSTALL_DIR}
         COMPONENT pcl_${_component})
+endif()
 endmacro(PCL_ADD_EXECUTABLE)
 
 ###############################################################################
 # Add an executable target as a bundle when available and required
 # _name The executable name.
 # _component The part of PCL that this library belongs to.
-# _bundle 
+# _bundle
 # ARGN the source files for the library.
 macro(PCL_ADD_EXECUTABLE_OPT_BUNDLE _name _component)
+if(PCL_BINARIES)
 if(APPLE AND VTK_USE_COCOA)
     add_executable(${_name} MACOSX_BUNDLE ${ARGN})
 else(APPLE AND VTK_USE_COCOA)
@@ -317,12 +320,13 @@ if(APPLE AND VTK_USE_COCOA)
 #     add_custom_command(TARGET ${_name}
 #                         POST_BUILD
 #                         COMMAND ${CMAKE_COMMAND} -E create_symlink ${PCL_OUTPUT_BIN_DIR}/${_name}.app/Contents/MacOS/${_name} ${PCL_OUTPUT_BIN_DIR}/${_name}
-# #			WORKING_DIRECTORY 
+# #			WORKING_DIRECTORY
 #                         COMMENT "Creating an alias for ${_name}.app to ${_name}")
     install(TARGETS ${_name} BUNDLE DESTINATION ${BIN_INSTALL_DIR} COMPONENT pcl_${_component})
 else(APPLE AND VTK_USE_COCOA)
     install(TARGETS ${_name} RUNTIME DESTINATION ${BIN_INSTALL_DIR} COMPONENT pcl_${_component})
 endif(APPLE AND VTK_USE_COCOA)
+endif()
 endmacro(PCL_ADD_EXECUTABLE_OPT_BUNDLE)
 
 
@@ -345,7 +349,7 @@ macro(PCL_CUDA_ADD_EXECUTABLE _name _component)
     if(USE_PROJECT_FOLDERS)
       set_target_properties(${_name} PROPERTIES FOLDER "Tools and demos")
     endif(USE_PROJECT_FOLDERS)
-  
+
     set(PCL_EXECUTABLES ${PCL_EXECUTABLES} ${_name})
     install(TARGETS ${_name} RUNTIME DESTINATION ${BIN_INSTALL_DIR}
         COMPONENT pcl_${_component})
@@ -483,8 +487,8 @@ macro(PCL_MAKE_PKGCONFIG _name _component _desc _pcl_deps _ext_deps _int_deps _c
 endmacro(PCL_MAKE_PKGCONFIG)
 
 ###############################################################################
-# Make a pkg-config file for a header-only library. 
-# Essentially a duplicate of PCL_MAKE_PKGCONFIG, but 
+# Make a pkg-config file for a header-only library.
+# Essentially a duplicate of PCL_MAKE_PKGCONFIG, but
 # ensures that no -L or l flags will be created
 # Do not include general PCL stuff in the
 # arguments; they will be added automatically.
@@ -626,7 +630,7 @@ endmacro(PCL_GET_SUBSUBSYS_STATUS)
 # _dependee Dependent subsystem.
 # _status AUTO_OFF to disable AUTO_ON to enable
 # ARGN[0] Reason for not building.
-macro(PCL_SET_SUBSYS_HYPERSTATUS _name _dependee _status) 
+macro(PCL_SET_SUBSYS_HYPERSTATUS _name _dependee _status)
     SET_IN_GLOBAL_MAP(PCL_SUBSYS_HYPERSTATUS ${_name}_${_dependee} ${_status})
     if(${ARGC} EQUAL 4)
         SET_IN_GLOBAL_MAP(PCL_SUBSYS_REASONS ${_dependee} ${ARGV3})
@@ -662,7 +666,7 @@ endmacro(PCL_UNSET_SUBSYS_HYPERSTATUS)
 ###############################################################################
 # Set the include directory name of a subsystem.
 # _name Subsystem name.
-# _includedir Name of subdirectory for includes 
+# _includedir Name of subdirectory for includes
 # ARGN[0] Reason for not building.
 macro(PCL_SET_SUBSYS_INCLUDE_DIR _name _includedir)
     SET_IN_GLOBAL_MAP(PCL_SUBSYS_INCLUDE ${_name} ${_includedir})
@@ -732,8 +736,8 @@ endmacro(PCL_WRITE_STATUS_REPORT)
 ##############################################################################
 # Collect subdirectories from dirname that contains filename and store them in
 #  varname.
-# WARNING If extra arguments are given then they are considered as exception 
-# list and varname will contain subdirectories of dirname that contains 
+# WARNING If extra arguments are given then they are considered as exception
+# list and varname will contain subdirectories of dirname that contains
 # fielename but doesn't belong to exception list.
 # dirname IN parent directory
 # filename IN file name to look for in each subdirectory of parent directory
@@ -754,7 +758,7 @@ macro(collect_subproject_directory_names dirname filename names dirs)
         foreach(file ${globbed})
             get_filename_component(dir ${file} PATH)
             set(${dirs} ${${dirs}} ${dir})
-        endforeach(file)      
+        endforeach(file)
     endif(${ARGC} GREATER 4)
     foreach(subdir ${${dirs}})
         file(STRINGS ${dirname}/${subdir}/CMakeLists.txt name REGEX "[setSET ]+\\(.*SUBSYS_NAME .*\\)$")
@@ -827,12 +831,12 @@ macro (PCL_ADD_DOC _subsys)
     endif(DOXYGEN_DOT_EXECUTABLE)
     if(NOT "${dependencies}" STREQUAL "")
       set(STRIPPED_HEADERS "${PCL_SOURCE_DIR}/${dependencies}/include")
-      string(REPLACE ";" "/include \\\n\t\t\t\t\t\t\t\t\t\t\t\t ${PCL_SOURCE_DIR}/" 
+      string(REPLACE ";" "/include \\\n\t\t\t\t\t\t\t\t\t\t\t\t ${PCL_SOURCE_DIR}/"
              STRIPPED_HEADERS "${STRIPPED_HEADERS}")
     endif(NOT "${dependencies}" STREQUAL "")
     set(DOC_SOURCE_DIR "\"${CMAKE_CURRENT_SOURCE_DIR}\"\\")
     foreach(dep ${dependencies})
-      set(DOC_SOURCE_DIR 
+      set(DOC_SOURCE_DIR
           "${DOC_SOURCE_DIR}\n\t\t\t\t\t\t\t\t\t\t\t\t \"${PCL_SOURCE_DIR}/${dep}\"\\")
     endforeach(dep)
     file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/html")
diff --git a/gpu/kinfu/tools/CMakeLists.txt b/gpu/kinfu/tools/CMakeLists.txt
index 0356c4f54..b4706ca39 100644
--- a/gpu/kinfu/tools/CMakeLists.txt
+++ b/gpu/kinfu/tools/CMakeLists.txt
@@ -11,17 +11,17 @@ if(WITH_OPENNI)
 	endif(NOT VTK_FOUND)
 
 	FILE(GLOB hdrs "*.h*")
-	include_directories(${VTK_INCLUDE_DIRS} ${OPENNI_INCLUDE_DIRS})       
+	include_directories(${VTK_INCLUDE_DIRS} ${OPENNI_INCLUDE_DIRS})
 
 	## KINECT FUSION
 	set(the_target pcl_kinfu_app)
 	set(srcs kinfu_app.cpp capture.cpp evaluation.cpp)
 
 	source_group("Source Files" FILES ${srcs} )
-
+	if(PCL_BINARIES)
 	PCL_ADD_EXECUTABLE_OPT_BUNDLE("${the_target}" "${SUBSYS_NAME}" ${srcs} ${hdrs})
 	target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu)
-  
+  endif()
 	if(OpenCV_FOUND)
 		target_link_libraries("${the_target}" ${OpenCV_LIBS})
 	endif()
@@ -30,8 +30,10 @@ if(WITH_OPENNI)
 	set(the_target pcl_record_tsdfvolume)
 	set(srcs record_tsdfvolume.cpp capture.cpp)
 
+	if(PCL_BINARIES)
 	PCL_ADD_EXECUTABLE("${the_target}" "${SUBSYS_NAME}" ${srcs} ${hdrs})
 	target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu)
+	endif()
 
 	## KINECT FUSION SIMULATION - DISABLED FOR NOW
 	#find_package(GLEW)
diff --git a/gpu/kinfu_large_scale/tools/CMakeLists.txt b/gpu/kinfu_large_scale/tools/CMakeLists.txt
index b70950e4e..74002638e 100644
--- a/gpu/kinfu_large_scale/tools/CMakeLists.txt
+++ b/gpu/kinfu_large_scale/tools/CMakeLists.txt
@@ -20,8 +20,10 @@ if(WITH_OPENNI)
 
   source_group("Source Files" FILES ${srcs} )
 
+  if(PCL_BINARIES)
   PCL_ADD_EXECUTABLE_OPT_BUNDLE("${the_target}" "${SUBSYS_NAME}" ${srcs} ${hdrs})
   target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu_large_scale pcl_kdtree pcl_features pcl_surface)
+  endif()
 
   ## KINECT FUSION
   set(the_target pcl_kinfu_largeScale)
@@ -29,22 +31,27 @@ if(WITH_OPENNI)
 
   source_group("Source Files" FILES ${srcs} )
 
+  if(PCL_BINARIES)
   PCL_ADD_EXECUTABLE_OPT_BUNDLE("${the_target}" "${SUBSYS_NAME}" ${srcs} ${hdrs})
   target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu_large_scale pcl_octree)
-  
+  endif()
+
   ## STANDALONE MARCHING CUBES
   set(the_target pcl_kinfu_largeScale_mesh_output)
   set(srcs process_kinfu_large_scale_output.cpp)
 
+  if(PCL_BINARIES)
   PCL_ADD_EXECUTABLE_OPT_BUNDLE("${the_target}" "${SUBSYS_NAME}" ${srcs} ${hdrs})
   target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu_large_scale pcl_filters)
-  
+  endif()
+
   ## RECORD MAPS_RGB
   set(the_target pcl_record_kinect_maps_rgb)
   set(srcs record_maps_rgb.cpp)
 
+  if(PCL_BINARIES)
   PCL_ADD_EXECUTABLE_OPT_BUNDLE("${the_target}" "${SUBSYS_NAME}" ${srcs} ${hdrs})
   target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu_large_scale pcl_filters)
-        
+  endif()
 
 endif()
diff --git a/gpu/people/tools/CMakeLists.txt b/gpu/people/tools/CMakeLists.txt
index e3d18a8aa..dd16cae84 100644
--- a/gpu/people/tools/CMakeLists.txt
+++ b/gpu/people/tools/CMakeLists.txt
@@ -16,6 +16,7 @@ include_directories(${VTK_INCLUDE_DIRS})
 #PCL_ADD_EXECUTABLE("${the_target}" "${SUBSYS_NAME}" people_tracking.cpp)
 #target_link_libraries("${the_target}" pcl_common pcl_filters pcl_kdtree pcl_segmentation pcl_kdtree pcl_gpu_people pcl_filters pcl_io pcl_visualization)
 
+if(PCL_BINARIES)
 if (HAVE_OPENNI)
   PCL_ADD_EXECUTABLE(pcl_people_app "${SUBSYS_NAME}" people_app.cpp)
   target_link_libraries (pcl_people_app pcl_common pcl_filters pcl_kdtree pcl_segmentation pcl_kdtree pcl_gpu_people pcl_filters pcl_io pcl_visualization ${Boost_LIBRARIES})
@@ -23,6 +24,7 @@ endif (HAVE_OPENNI)
 
 PCL_ADD_EXECUTABLE(pcl_people_pcd_prob "${SUBSYS_NAME}" people_pcd_prob.cpp)
 target_link_libraries (pcl_people_pcd_prob pcl_common pcl_filters pcl_kdtree pcl_segmentation pcl_kdtree pcl_gpu_people pcl_filters pcl_io pcl_visualization ${Boost_LIBRARIES})
+endif()
 
 #PCL_ADD_EXECUTABLE(people_pcd_folder "${SUBSYS_NAME}" people_pcd_folder.cpp)
 #target_link_libraries (people_pcd_folder pcl_common pcl_filters pcl_kdtree pcl_segmentation pcl_kdtree pcl_gpu_people pcl_filters pcl_io pcl_visualization ${Boost_LIBRARIES})
diff --git a/io/tools/CMakeLists.txt b/io/tools/CMakeLists.txt
index 6df4e5761..3209b5f8f 100644
--- a/io/tools/CMakeLists.txt
+++ b/io/tools/CMakeLists.txt
@@ -1,3 +1,5 @@
+if(PCL_BINARIES)
+
 if(WITH_OPENNI)
   PCL_ADD_EXECUTABLE(pcl_openni_grabber_example ${SUBSYS_NAME} openni_grabber_example.cpp)
   target_link_libraries(pcl_openni_grabber_example pcl_common pcl_io)
@@ -21,6 +23,6 @@ PCL_ADD_EXECUTABLE(pcl_hdl_grabber ${SUBSYS_NAME} hdl_grabber_example.cpp)
 target_link_libraries(pcl_convert_pcd_ascii_binary pcl_common pcl_io)
 target_link_libraries(pcl_hdl_grabber pcl_common pcl_io)
 target_link_libraries(pcl_pcd_introduce_nan pcl_common pcl_io)
-
+endif()
 #libply inherited tools
 add_subdirectory(ply)
diff --git a/io/tools/ply/CMakeLists.txt b/io/tools/ply/CMakeLists.txt
index ec15773f3..6928d0931 100644
--- a/io/tools/ply/CMakeLists.txt
+++ b/io/tools/ply/CMakeLists.txt
@@ -1,3 +1,4 @@
+if(PCL_BINARIES)
 PCL_ADD_EXECUTABLE(pcl_ply2obj ${SUBSYS_NAME} ply2obj.cpp)
 target_link_libraries(pcl_ply2obj pcl_io_ply)
 
@@ -9,3 +10,4 @@ target_link_libraries(pcl_ply2raw pcl_io_ply)
 
 PCL_ADD_EXECUTABLE(pcl_plyheader ${SUBSYS_NAME} plyheader.cpp)
 target_link_libraries(pcl_plyheader pcl_io_ply)
+endif()
diff --git a/outofcore/tools/CMakeLists.txt b/outofcore/tools/CMakeLists.txt
index 17444d296..517476d51 100644
--- a/outofcore/tools/CMakeLists.txt
+++ b/outofcore/tools/CMakeLists.txt
@@ -1,9 +1,11 @@
 # pcl_outofcore_process
+if(PCL_BINARIES)
 PCL_ADD_EXECUTABLE(pcl_outofcore_process "${SUBSYS_NAME}" outofcore_process.cpp)
 target_link_libraries(pcl_outofcore_process pcl_common pcl_filters pcl_io pcl_octree pcl_outofcore)
 
 PCL_ADD_EXECUTABLE(pcl_outofcore_print "${SUBSYS_NAME}" outofcore_print.cpp)
 target_link_libraries(pcl_outofcore_print pcl_common pcl_filters pcl_io pcl_octree pcl_outofcore)
+endif()
 
 if(NOT VTK_FOUND)
   set(DEFAULT FALSE)
@@ -14,10 +16,10 @@ else(NOT VTK_FOUND)
   set(VTK_USE_FILE "${VTK_USE_FILE}" CACHE INTERNAL "VTK_USE_FILE")
   include("${VTK_USE_FILE}")
   include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")
-  
+
   if("${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}" VERSION_GREATER "5.8")
     # pcl_outofcore_viewer uses some functions not present in vtk 5.8
-  
+
     set(srcs outofcore_viewer.cpp
            ../src/visualization/camera.cpp
            ../src/visualization/common.cpp
@@ -26,10 +28,11 @@ else(NOT VTK_FOUND)
            ../src/visualization/outofcore_cloud.cpp
            ../src/visualization/scene.cpp
            ../src/visualization/viewport.cpp)
-  
+
     # pcl_outofcore_viewer
+    if(PCL_BINARIES)
     PCL_ADD_EXECUTABLE_OPT_BUNDLE(pcl_outofcore_viewer "${SUBSYS_NAME}" ${srcs})
     target_link_libraries(pcl_outofcore_viewer pcl_common pcl_io pcl_outofcore pcl_visualization pcl_octree pcl_filters)
-  
+    endif()
   endif("${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}" VERSION_GREATER "5.8")
 endif(NOT VTK_FOUND)
diff --git a/people/CMakeLists.txt b/people/CMakeLists.txt
index 8907e012f..dc73b3636 100644
--- a/people/CMakeLists.txt
+++ b/people/CMakeLists.txt
@@ -20,7 +20,7 @@ PCL_SUBSYS_DEPEND(build "${SUBSYS_NAME}" DEPS ${SUBSYS_DEPS})
 PCL_ADD_DOC("${SUBSYS_NAME}")
 
 if(build)
-    set(incs 
+    set(incs
         "include/pcl/${SUBSYS_NAME}/ground_based_people_detection_app.h"
         "include/pcl/${SUBSYS_NAME}/head_based_subcluster.h"
         "include/pcl/${SUBSYS_NAME}/height_map_2d.h"
@@ -47,10 +47,10 @@ if(build)
     # Install include files
     PCL_ADD_INCLUDES("${SUBSYS_NAME}" "${SUBSYS_NAME}" ${incs})
     PCL_ADD_INCLUDES("${SUBSYS_NAME}" "${SUBSYS_NAME}/impl" ${impl_incs})
-    
+
     #SET_TARGET_PROPERTIES("${LIB_NAME}" PROPERTIES LINKER_LANGUAGE CXX)
 
-    if(WITH_OPENNI)
+    if(WITH_OPENNI AND PCL_BINARIES)
         PCL_ADD_EXECUTABLE_OPT_BUNDLE(pcl_ground_based_rgbd_people_detector "${SUBSYS_NAME}" apps/main_ground_based_people_detection.cpp)
         target_link_libraries(pcl_ground_based_rgbd_people_detector pcl_common pcl_kdtree pcl_search pcl_features pcl_sample_consensus pcl_filters pcl_io pcl_visualization pcl_segmentation pcl_people)
     endif()
diff --git a/simulation/tools/CMakeLists.txt b/simulation/tools/CMakeLists.txt
index 368d8aecc..b735a096a 100644
--- a/simulation/tools/CMakeLists.txt
+++ b/simulation/tools/CMakeLists.txt
@@ -1,25 +1,25 @@
 find_package(GLEW)
-if(GLEW_FOUND)
+if(GLEW_FOUND AND PCL_BINARIES)
   find_package(GLUT)
   if(GLUT_FOUND)
     include_directories(${GLUT_INCLUDE_DIR} ${GLEW_INCLUDE_DIR})
     include_directories(${VTK_INCLUDE_DIRS})
 
     PCL_ADD_EXECUTABLE(pcl_sim_viewer ${SUBSYS_NAME} sim_viewer.cpp)
-    target_link_libraries (pcl_sim_viewer   
-      ${VTK_IO_TARGET_LINK_LIBRARIES}    pcl_kdtree 
-      pcl_simulation   pcl_common  pcl_io pcl_visualization   
+    target_link_libraries (pcl_sim_viewer
+      ${VTK_IO_TARGET_LINK_LIBRARIES}    pcl_kdtree
+      pcl_simulation   pcl_common  pcl_io pcl_visualization
       ${GLEW_LIBRARIES} ${GLUT_LIBRARIES} ${OPENGL_LIBRARIES} ${GLEW_LIBRARIES})
 
     PCL_ADD_EXECUTABLE(pcl_sim_test_simple ${SUBSYS_NAME} sim_test_simple.cpp)
     target_link_libraries (pcl_sim_test_simple
-      ${VTK_IO_TARGET_LINK_LIBRARIES}   
-      pcl_simulation   pcl_common  pcl_io pcl_visualization 
+      ${VTK_IO_TARGET_LINK_LIBRARIES}
+      pcl_simulation   pcl_common  pcl_io pcl_visualization
       ${GLEW_LIBRARIES} ${GLUT_LIBRARIES} ${OPENGL_LIBRARIES} ${GLEW_LIBRARIES})
 
     PCL_ADD_EXECUTABLE(pcl_sim_test_performance ${SUBSYS_NAME} sim_test_performance.cpp)
-    target_link_libraries (pcl_sim_test_performance 
-      ${VTK_IO_TARGET_LINK_LIBRARIES} 
+    target_link_libraries (pcl_sim_test_performance
+      ${VTK_IO_TARGET_LINK_LIBRARIES}
       pcl_simulation   pcl_common  pcl_io pcl_visualization
       ${GLEW_LIBRARIES} ${GLUT_LIBRARIES} ${OPENGL_LIBRARIES} ${GLEW_LIBRARIES})
 
@@ -28,14 +28,14 @@ if(GLEW_FOUND)
     set(LIB_NAME pcl_simulation_io)
     PCL_ADD_LIBRARY(${LIB_NAME} ${SUBSYS_NAME}
       ${srcs} ${incs} ${compression_incs} ${impl_incs}
-      ${VTK_IO_TARGET_LINK_LIBRARIES} 
+      ${VTK_IO_TARGET_LINK_LIBRARIES}
       ${OPENNI_INCLUDES})
-    target_link_libraries(${LIB_NAME} pcl_simulation pcl_common pcl_io 
+    target_link_libraries(${LIB_NAME} pcl_simulation pcl_common pcl_io
 	    ${VTK_IO_TARGET_LINK_LIBRARIES} ${OPENGL_LIBRARIES} ${GLUT_LIBRARIES})
 
     PCL_ADD_EXECUTABLE(pcl_sim_terminal_demo ${SUBSYS_NAME} sim_terminal_demo.cpp)
     target_link_libraries (pcl_sim_terminal_demo
-	    ${VTK_IO_TARGET_LINK_LIBRARIES}    
+	    ${VTK_IO_TARGET_LINK_LIBRARIES}
 	    pcl_simulation   pcl_common  pcl_io pcl_visualization pcl_simulation_io
 	    ${GLEW_LIBRARIES} ${GLUT_LIBRARIES} ${OPENGL_LIBRARIES} ${GLEW_LIBRARIES})
   endif(GLUT_FOUND)
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index 50028cb42..eb63916cd 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -8,7 +8,7 @@ set (REASON "")
 PCL_SUBSYS_OPTION (BUILD_tools "${SUBSYS_NAME}" "${SUBSYS_DESC}" ${DEFAULT} "${REASON}")
 PCL_SUBSYS_DEPEND (BUILD_tools "${SUBSYS_NAME}" DEPS ${SUBSYS_DEPS} OPT_DEPS ${SUBSYS_OPT_DEPS})
 
-if (BUILD_tools)
+if (BUILD_tools AND PCL_BINARIES)
 
   PCL_ADD_EXECUTABLE(pcl_sac_segmentation_plane "${SUBSYS_NAME}" sac_segmentation_plane.cpp)
   target_link_libraries(pcl_sac_segmentation_plane pcl_common pcl_io pcl_sample_consensus pcl_segmentation)
@@ -48,22 +48,22 @@ if (BUILD_tools)
 
   PCL_ADD_EXECUTABLE (pcl_vfh_estimation "${SUBSYS_NAME}" vfh_estimation.cpp)
   target_link_libraries (pcl_vfh_estimation pcl_common pcl_io pcl_features pcl_kdtree)
-  
+
   PCL_ADD_EXECUTABLE (pcl_spin_estimation "${SUBSYS_NAME}" spin_estimation.cpp)
   target_link_libraries (pcl_spin_estimation pcl_common pcl_io pcl_features pcl_kdtree)
 
   PCL_ADD_EXECUTABLE (pcl_voxel_grid "${SUBSYS_NAME}" voxel_grid.cpp)
   target_link_libraries (pcl_voxel_grid pcl_common pcl_io pcl_filters)
-	
+
   PCL_ADD_EXECUTABLE (pcl_passthrough_filter "${SUBSYS_NAME}" passthrough_filter.cpp)
   target_link_libraries (pcl_passthrough_filter pcl_common pcl_io pcl_filters)
-	
+
   PCL_ADD_EXECUTABLE (pcl_radius_filter "${SUBSYS_NAME}" radius_filter.cpp)
   target_link_libraries (pcl_radius_filter pcl_common pcl_io pcl_filters)
 
   PCL_ADD_EXECUTABLE (pcl_extract_feature "${SUBSYS_NAME}" extract_feature.cpp)
   target_link_libraries (pcl_extract_feature pcl_common pcl_io pcl_features pcl_kdtree)
-  
+
   PCL_ADD_EXECUTABLE (pcl_compute_cloud_error "${SUBSYS_NAME}" compute_cloud_error.cpp)
   target_link_libraries (pcl_compute_cloud_error pcl_common pcl_io pcl_kdtree pcl_search)
 
@@ -81,19 +81,19 @@ if (BUILD_tools)
     PCL_ADD_EXECUTABLE (pcl_add_gaussian_noise "${SUBSYS_NAME}" add_gaussian_noise.cpp)
     target_link_libraries (pcl_add_gaussian_noise pcl_common pcl_io)
   endif()
-  
+
   PCL_ADD_EXECUTABLE (pcl_outlier_removal "${SUBSYS_NAME}" outlier_removal.cpp)
   target_link_libraries (pcl_outlier_removal pcl_common pcl_io pcl_filters)
-  
+
   PCL_ADD_EXECUTABLE (pcl_mls_smoothing "${SUBSYS_NAME}" mls_smoothing.cpp)
   target_link_libraries (pcl_mls_smoothing pcl_common pcl_io pcl_surface pcl_filters)
-  
+
   PCL_ADD_EXECUTABLE (pcl_marching_cubes_reconstruction "${SUBSYS_NAME}" marching_cubes_reconstruction.cpp)
   target_link_libraries (pcl_marching_cubes_reconstruction pcl_common pcl_io pcl_surface)
 
   PCL_ADD_EXECUTABLE (pcl_gp3_surface "${SUBSYS_NAME}" gp3_surface.cpp)
   target_link_libraries (pcl_gp3_surface pcl_common pcl_io pcl_surface)
-  
+
   PCL_ADD_EXECUTABLE(pcl_icp "${SUBSYS_NAME}" icp.cpp)
   target_link_libraries(pcl_icp pcl_common pcl_io pcl_registration)
 
@@ -108,7 +108,7 @@ if (BUILD_tools)
 
   PCL_ADD_EXECUTABLE(pcl_ndt2d "${SUBSYS_NAME}" ndt2d.cpp)
   target_link_libraries(pcl_ndt2d pcl_common pcl_io pcl_registration)
-    
+
   PCL_ADD_EXECUTABLE(pcl_ndt3d "${SUBSYS_NAME}" ndt3d.cpp)
   target_link_libraries(pcl_ndt3d pcl_common pcl_io pcl_registration)
 
@@ -117,7 +117,7 @@ if (BUILD_tools)
 
   PCL_ADD_EXECUTABLE(pcl_concatenate_points_pcd "${SUBSYS_NAME}" concatenate_points_pcd.cpp)
   target_link_libraries(pcl_concatenate_points_pcd pcl_common pcl_io)
-  
+
   PCL_ADD_EXECUTABLE(pcl_poisson_reconstruction "${SUBSYS_NAME}" poisson_reconstruction.cpp)
   target_link_libraries(pcl_poisson_reconstruction pcl_common pcl_io pcl_surface)
 
@@ -129,7 +129,7 @@ if (BUILD_tools)
 
   PCL_ADD_EXECUTABLE(pcl_linemod_detection "${SUBSYS_NAME}" linemod_detection.cpp)
   target_link_libraries(pcl_linemod_detection pcl_common pcl_io pcl_recognition)
-  
+
   PCL_ADD_EXECUTABLE(pcl_fast_bilateral_filter "${SUBSYS_NAME}" fast_bilateral_filter.cpp)
   target_link_libraries(pcl_fast_bilateral_filter pcl_common pcl_io pcl_filters)
 
@@ -141,7 +141,7 @@ if (BUILD_tools)
 
   PCL_ADD_EXECUTABLE(pcl_morph "${SUBSYS_NAME}" morph.cpp)
   target_link_libraries(pcl_morph pcl_common pcl_io pcl_filters)
-  
+
   PCL_ADD_EXECUTABLE(pcl_progressive_morphological_filter "${SUBSYS_NAME}" progressive_morphological_filter.cpp)
   target_link_libraries(pcl_progressive_morphological_filter pcl_common pcl_io pcl_filters pcl_segmentation)
 
@@ -176,7 +176,7 @@ if (BUILD_tools)
       set(VTK_USE_FILE "${VTK_USE_FILE}" CACHE INTERNAL "VTK_USE_FILE")
       include("${VTK_USE_FILE}")
       include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")
-  
+
       PCL_ADD_EXECUTABLE(pcl_png2pcd "${SUBSYS_NAME}" png2pcd.cpp)
       target_link_libraries(pcl_png2pcd pcl_common pcl_io)
 
@@ -188,7 +188,7 @@ if (BUILD_tools)
 
       PCL_ADD_EXECUTABLE(pcl_tiff2pcd "${SUBSYS_NAME}" tiff2pcd.cpp)
       target_link_libraries(pcl_tiff2pcd pcl_common pcl_io)
-          
+
       PCL_ADD_EXECUTABLE(pcl_ply2vtk "${SUBSYS_NAME}" ply2vtk.cpp)
       target_link_libraries(pcl_ply2vtk pcl_common pcl_io)
 
@@ -241,19 +241,19 @@ if (BUILD_tools)
 
         PCL_ADD_EXECUTABLE(pcl_mesh2pcd "${SUBSYS_NAME}" mesh2pcd.cpp)
         target_link_libraries(pcl_mesh2pcd pcl_common pcl_io pcl_visualization pcl_filters ${VTK_LIBRARIES})
-        
+
         PCL_ADD_EXECUTABLE(pcl_mesh_sampling "${SUBSYS_NAME}" mesh_sampling.cpp)
         target_link_libraries(pcl_mesh_sampling pcl_common pcl_io pcl_visualization pcl_filters ${VTK_LIBRARIES})
-        
+
         PCL_ADD_EXECUTABLE(pcl_virtual_scanner "${SUBSYS_NAME}" virtual_scanner.cpp)
         target_link_libraries(pcl_virtual_scanner pcl_common pcl_io pcl_filters pcl_visualization ${VTK_LIBRARIES})
 
         PCL_ADD_EXECUTABLE (pcl_voxel_grid_occlusion_estimation "${SUBSYS_NAME}" voxel_grid_occlusion_estimation.cpp)
         target_link_libraries (pcl_voxel_grid_occlusion_estimation pcl_common pcl_io pcl_filters pcl_visualization)
-        
+
         if(WITH_OPENNI)
           PCL_ADD_EXECUTABLE(pcl_openni_save_image "${SUBSYS_NAME}" openni_save_image.cpp)
-          target_link_libraries(pcl_openni_save_image pcl_common pcl_io pcl_visualization)  
+          target_link_libraries(pcl_openni_save_image pcl_common pcl_io pcl_visualization)
         endif()
       endif(BUILD_visualization)
   endif(NOT VTK_FOUND)
@@ -272,6 +272,6 @@ if (BUILD_tools)
       target_link_libraries(pcl_video pcl_common pcl_io pcl_visualization
           ${Tide_LIBRARIES})
   endif(Tide_FOUND)
-  
+
 
 endif (BUILD_tools)
diff --git a/visualization/tools/CMakeLists.txt b/visualization/tools/CMakeLists.txt
index 2b515f58d..e0044d232 100644
--- a/visualization/tools/CMakeLists.txt
+++ b/visualization/tools/CMakeLists.txt
@@ -1,9 +1,10 @@
+if(PCL_BINARIES)
 PCL_ADD_EXECUTABLE_OPT_BUNDLE(pcl_viewer ${SUBSYS_NAME} pcd_viewer.cpp)
 target_link_libraries(pcl_viewer pcl_common pcl_io pcl_kdtree pcl_visualization pcl_search)
 
 PCL_ADD_EXECUTABLE_OPT_BUNDLE(pcl_pcd_image_viewer ${SUBSYS_NAME} image_viewer.cpp)
 target_link_libraries(pcl_pcd_image_viewer pcl_common pcl_io pcl_kdtree pcl_visualization)
-    
+
 PCL_ADD_EXECUTABLE(pcl_timed_trigger_test ${SUBSYS_NAME} timed_trigger_test.cpp)
 target_link_libraries(pcl_timed_trigger_test pcl_io pcl_common pcl_kdtree pcl_visualization)
 
@@ -17,13 +18,13 @@ if(WITH_OPENNI)
 
     PCL_ADD_EXECUTABLE_OPT_BUNDLE(pcl_pcd_grabber_viewer ${SUBSYS_NAME} pcd_grabber_viewer.cpp)
     target_link_libraries(pcl_pcd_grabber_viewer pcl_common pcl_io pcl_kdtree pcl_visualization)
-    
+
     PCL_ADD_EXECUTABLE_OPT_BUNDLE(pcl_image_grabber_saver ${SUBSYS_NAME} image_grabber_saver.cpp)
     target_link_libraries(pcl_image_grabber_saver pcl_common pcl_io pcl_kdtree pcl_visualization)
 
     PCL_ADD_EXECUTABLE_OPT_BUNDLE(pcl_image_grabber_viewer ${SUBSYS_NAME} image_grabber_viewer.cpp)
     target_link_libraries(pcl_image_grabber_viewer pcl_common pcl_io pcl_kdtree pcl_visualization)
-      
+
     #PCL_ADD_EXECUTABLE(pcl_openni_viewer_simple ${SUBSYS_NAME} openni_viewer_simple.cpp)
     #target_link_libraries(pcl_openni_viewer_simple pcl_common pcl_io pcl_kdtree pcl_visualization)
 
@@ -61,4 +62,4 @@ if(WITH_RSSDK)
     PCL_ADD_EXECUTABLE_OPT_BUNDLE(pcl_real_sense_viewer ${SUBSYS_NAME} real_sense_viewer.cpp)
     target_link_libraries(pcl_real_sense_viewer pcl_common pcl_io pcl_visualization)
 endif()
-
+endif()
